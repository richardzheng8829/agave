/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolConfiguratorInterface extends ethers.utils.Interface {
  functions: {
    "activateReserve(address)": FunctionFragment;
    "configureReserveAsCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "deactivateReserve(address)": FunctionFragment;
    "disableBorrowingOnReserve(address)": FunctionFragment;
    "disableReserveStableRate(address)": FunctionFragment;
    "enableBorrowingOnReserve(address,bool)": FunctionFragment;
    "enableReserveStableRate(address)": FunctionFragment;
    "freezeReserve(address)": FunctionFragment;
    "initReserve(address,address,address,uint8,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setPoolPause(bool)": FunctionFragment;
    "setReserveFactor(address,uint256)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,address)": FunctionFragment;
    "setReserveLimits(address,uint256,uint256,uint256)": FunctionFragment;
    "unfreezeReserve(address)": FunctionFragment;
    "updateAToken(address,address)": FunctionFragment;
    "updateStableDebtToken(address,address)": FunctionFragment;
    "updateVariableDebtToken(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureReserveAsCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBorrowingOnReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveStableRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableBorrowingOnReserve",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveStableRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserve",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPoolPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveLimits",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStableDebtToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVariableDebtToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStableDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVariableDebtToken",
    data: BytesLike
  ): Result;

  events: {
    "ATokenUpgraded(address,address,address)": EventFragment;
    "BorrowingDisabledOnReserve(address)": EventFragment;
    "BorrowingEnabledOnReserve(address,bool)": EventFragment;
    "CollateralConfigurationChanged(address,uint256,uint256,uint256)": EventFragment;
    "ReserveActivated(address)": EventFragment;
    "ReserveDeactivated(address)": EventFragment;
    "ReserveDecimalsChanged(address,uint256)": EventFragment;
    "ReserveFactorChanged(address,uint256)": EventFragment;
    "ReserveFrozen(address)": EventFragment;
    "ReserveInitialized(address,address,address,address,address)": EventFragment;
    "ReserveInterestRateStrategyChanged(address,address)": EventFragment;
    "ReserveUnfrozen(address)": EventFragment;
    "StableDebtTokenUpgraded(address,address,address)": EventFragment;
    "StableRateDisabledOnReserve(address)": EventFragment;
    "StableRateEnabledOnReserve(address)": EventFragment;
    "VariableDebtTokenUpgraded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ATokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingDisabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingEnabledOnReserve"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollateralConfigurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDecimalsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveInterestRateStrategyChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveUnfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableDebtTokenUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableRateDisabledOnReserve"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableRateEnabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VariableDebtTokenUpgraded"): EventFragment;
}

export class LendingPoolConfigurator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolConfiguratorInterface;

  functions: {
    activateReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureReserveAsCollateral(address,uint256,uint256,uint256)"(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactivateReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disableBorrowingOnReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableBorrowingOnReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableBorrowingOnReserve(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableBorrowingOnReserve(address,bool)"(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    freezeReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "freezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initReserve(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initReserve(address,address,address,uint8,address)"(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolPause(
      val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolPause(bool)"(
      val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveFactor(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveFactor(address,uint256)"(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveInterestRateStrategyAddress(address,address)"(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveLimits(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveLimits(address,uint256,uint256,uint256)"(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unfreezeReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unfreezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateVariableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateVariableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  activateReserve(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateReserve(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureReserveAsCollateral(
    asset: string,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureReserveAsCollateral(address,uint256,uint256,uint256)"(
    asset: string,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactivateReserve(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateReserve(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disableBorrowingOnReserve(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableBorrowingOnReserve(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disableReserveStableRate(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableReserveStableRate(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableBorrowingOnReserve(
    asset: string,
    stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableBorrowingOnReserve(address,bool)"(
    asset: string,
    stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableReserveStableRate(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableReserveStableRate(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  freezeReserve(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "freezeReserve(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initReserve(
    aTokenImpl: string,
    stableDebtTokenImpl: string,
    variableDebtTokenImpl: string,
    underlyingAssetDecimals: BigNumberish,
    interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initReserve(address,address,address,uint8,address)"(
    aTokenImpl: string,
    stableDebtTokenImpl: string,
    variableDebtTokenImpl: string,
    underlyingAssetDecimals: BigNumberish,
    interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolPause(
    val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolPause(bool)"(
    val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveFactor(
    asset: string,
    reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveFactor(address,uint256)"(
    asset: string,
    reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    asset: string,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveInterestRateStrategyAddress(address,address)"(
    asset: string,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveLimits(
    asset: string,
    depositLimit: BigNumberish,
    borrowLimit: BigNumberish,
    collateralUsageLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveLimits(address,uint256,uint256,uint256)"(
    asset: string,
    depositLimit: BigNumberish,
    borrowLimit: BigNumberish,
    collateralUsageLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unfreezeReserve(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unfreezeReserve(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAToken(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAToken(address,address)"(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStableDebtToken(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStableDebtToken(address,address)"(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateVariableDebtToken(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateVariableDebtToken(address,address)"(
    asset: string,
    implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    activateReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    "activateReserve(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "configureReserveAsCollateral(address,uint256,uint256,uint256)"(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    "deactivateReserve(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableBorrowingOnReserve(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableBorrowingOnReserve(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableReserveStableRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableReserveStableRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableBorrowingOnReserve(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableBorrowingOnReserve(address,bool)"(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    enableReserveStableRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableReserveStableRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    "freezeReserve(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initReserve(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initReserve(address,address,address,uint8,address)"(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(provider: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPause(val: boolean, overrides?: CallOverrides): Promise<void>;

    "setPoolPause(bool)"(
      val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFactor(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveFactor(address,uint256)"(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveInterestRateStrategyAddress(address,address)"(
      asset: string,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveLimits(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveLimits(address,uint256,uint256,uint256)"(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    "unfreezeReserve(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAToken(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStableDebtToken(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVariableDebtToken(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateVariableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ATokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;

    BorrowingDisabledOnReserve(asset: string | null): EventFilter;

    BorrowingEnabledOnReserve(
      asset: string | null,
      stableRateEnabled: null
    ): EventFilter;

    CollateralConfigurationChanged(
      asset: string | null,
      ltv: null,
      liquidationThreshold: null,
      liquidationBonus: null
    ): EventFilter;

    ReserveActivated(asset: string | null): EventFilter;

    ReserveDeactivated(asset: string | null): EventFilter;

    ReserveDecimalsChanged(asset: string | null, decimals: null): EventFilter;

    ReserveFactorChanged(asset: string | null, factor: null): EventFilter;

    ReserveFrozen(asset: string | null): EventFilter;

    ReserveInitialized(
      asset: string | null,
      aToken: string | null,
      stableDebtToken: null,
      variableDebtToken: null,
      interestRateStrategyAddress: null
    ): EventFilter;

    ReserveInterestRateStrategyChanged(
      asset: string | null,
      strategy: null
    ): EventFilter;

    ReserveUnfrozen(asset: string | null): EventFilter;

    StableDebtTokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;

    StableRateDisabledOnReserve(asset: string | null): EventFilter;

    StableRateEnabledOnReserve(asset: string | null): EventFilter;

    VariableDebtTokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;
  };

  estimateGas: {
    activateReserve(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "activateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureReserveAsCollateral(address,uint256,uint256,uint256)"(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactivateReserve(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "deactivateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disableBorrowingOnReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableBorrowingOnReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableBorrowingOnReserve(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableBorrowingOnReserve(address,bool)"(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    freezeReserve(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "freezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initReserve(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initReserve(address,address,address,uint8,address)"(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(provider: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolPause(val: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPoolPause(bool)"(
      val: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveFactor(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveFactor(address,uint256)"(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveInterestRateStrategyAddress(address,address)"(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveLimits(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveLimits(address,uint256,uint256,uint256)"(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unfreezeReserve(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "unfreezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateVariableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateVariableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureReserveAsCollateral(address,uint256,uint256,uint256)"(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactivateReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disableBorrowingOnReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableBorrowingOnReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableBorrowingOnReserve(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableBorrowingOnReserve(address,bool)"(
      asset: string,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableReserveStableRate(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableReserveStableRate(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    freezeReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "freezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initReserve(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initReserve(address,address,address,uint8,address)"(
      aTokenImpl: string,
      stableDebtTokenImpl: string,
      variableDebtTokenImpl: string,
      underlyingAssetDecimals: BigNumberish,
      interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolPause(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolPause(bool)"(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveFactor(address,uint256)"(
      asset: string,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveInterestRateStrategyAddress(address,address)"(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveLimits(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveLimits(address,uint256,uint256,uint256)"(
      asset: string,
      depositLimit: BigNumberish,
      borrowLimit: BigNumberish,
      collateralUsageLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unfreezeReserve(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unfreezeReserve(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateVariableDebtToken(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateVariableDebtToken(address,address)"(
      asset: string,
      implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
